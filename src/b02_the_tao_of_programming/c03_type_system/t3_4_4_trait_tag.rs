//! 标记特性 marker
//! 可以利用trait约束的功能给类型打标记
//! Rust提供了5个重要的标记trait
//! Sized       标识编译器可以确定大小的类型
//! Unsized     标识编译器不可以确定大小的类型，即动态大小类型
//! Copy        标识可以安全的按位复制的类型
//! Send        标识可以安全的跨线程通信的类型  即安全传值(含所有权)
//! Sync        标识可以安全的在线程间共享引用的类型  即安全传引用(不含所有权)
//!
//! Rust正是有了这种标记机制，可以将许多以前的编程语言中固定的一些法则，在Rust中使用标记进行明确。
//! 比如Copy标记，明确了栈上复制的类型。比如Hash标记，明确了可以进行Hash计算从而作为Key使用的类型。
//! 这些在很多老的编程语言中，都是作为语法或规则进行描述，而在Rust中，我们可以直接查看类型标记。
